import { Ionicons } from '@expo/vector-icons';
import { useEffect, useRef, useState } from 'react';
import {
  Alert,
  Animated,
  FlatList,
  Image,
  Modal,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';

const HealthScanChatbot = () => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      text: 'Xin ch√†o! T√¥i l√† HealthScan AI - tr·ª£ l√Ω s·ª©c kh·ªèe th√¥ng minh c·ªßa b·∫°n. H√£y ch·ª•p ·∫£nh th√†nh ph·∫ßn c·ªßa s·∫£n ph·∫©m ho·∫∑c ƒë·∫∑t c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe nh√©! üåø',
      timestamp: new Date().toLocaleString('vi-VN'),
      date: new Date().toLocaleDateString('vi-VN')
    }
  ]);
  
  const [chatHistory, setChatHistory] = useState([
    {
      id: 1,
      title: 'T∆∞ v·∫•n s·∫£n ph·∫©m dinh d∆∞·ª°ng',
      lastMessage: 'S·∫£n ph·∫©m n√†y c√≥ an to√†n cho tr·∫ª em kh√¥ng?',
      timestamp: '2 gi·ªù tr∆∞·ªõc',
      messages: 5,
      date: '4/9/2025'
    },
    {
      id: 2,
      title: 'Ki·ªÉm tra th√†nh ph·∫ßn b√°nh k·∫πo',
      lastMessage: 'C√≥ ch·ª©a ch·∫•t b·∫£o qu·∫£n c√≥ h·∫°i kh√¥ng?',
      timestamp: '1 ng√†y tr∆∞·ªõc',
      messages: 8,
      date: '3/9/2025'
    },
    {
      id: 3,
      title: 'Ph√¢n t√≠ch vitamin t·ªïng h·ª£p',
      lastMessage: 'Li·ªÅu l∆∞·ª£ng n√†y c√≥ ph√π h·ª£p kh√¥ng?',
      timestamp: '3 ng√†y tr∆∞·ªõc',
      messages: 12,
      date: '1/9/2025'
    },
    {
      id: 4,
      title: 'T∆∞ v·∫•n s·ªØa b·ªôt cho b√©',
      lastMessage: 'Th√†nh ph·∫ßn n√†o t·ªët cho ph√°t tri·ªÉn n√£o b·ªô?',
      timestamp: '1 tu·∫ßn tr∆∞·ªõc',
      messages: 6,
      date: '28/8/2025'
    }
  ]);
  
  const [inputText, setInputText] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [showQuestions, setShowQuestions] = useState(true);
  const [showMenu, setShowMenu] = useState(false);
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [showQuickQuestionsModal, setShowQuickQuestionsModal] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const scrollViewRef = useRef(null);
  const recordingAnimation = useRef(new Animated.Value(1)).current;

  const suggestedQuestions = [
    { text: 'S·∫£n ph·∫©m n√†y c√≥ an to√†n cho tr·∫ª em kh√¥ng?', category: 'An to√†n' },
    { text: 'Th√†nh ph·∫ßn n√†o trong s·∫£n ph·∫©m n√†y c√≥ th·ªÉ g√¢y d·ªã ·ª©ng?', category: 'D·ªã ·ª©ng' },
    { text: 'S·∫£n ph·∫©m n√†y c√≥ ph√π h·ª£p v·ªõi ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng kh√¥ng?', category: 'S·ª©c kh·ªèe' },
    { text: 'C√≥ s·∫£n ph·∫©m n√†o t·ªët h∆°n kh√¥ng?', category: 'Thay th·∫ø' },
    { text: 'T√°c d·ª•ng ph·ª• c·ªßa s·∫£n ph·∫©m n√†y l√† g√¨?', category: 'T√°c d·ª•ng ph·ª•' },
    { text: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m n√†y nh∆∞ th·∫ø n√†o?', category: 'H∆∞·ªõng d·∫´n' }
  ];

  const quickQuestions = [
    { text: 'S·∫£n ph·∫©m n√†y c√≥ an to√†n cho tr·∫ª em kh√¥ng?', category: 'An to√†n' },
    { text: 'Th√†nh ph·∫ßn n√†o trong s·∫£n ph·∫©m n√†y c√≥ th·ªÉ g√¢y d·ªã ·ª©ng?', category: 'D·ªã ·ª©ng' },
    { text: 'S·∫£n ph·∫©m n√†y c√≥ ph√π h·ª£p v·ªõi ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng kh√¥ng?', category: 'S·ª©c kh·ªèe' },
    { text: 'C√≥ s·∫£n ph·∫©m n√†o t·ªët h∆°n kh√¥ng?', category: 'Thay th·∫ø' },
    { text: 'T√°c d·ª•ng ph·ª• c·ªßa s·∫£n ph·∫©m n√†y l√† g√¨?', category: 'T√°c d·ª•ng ph·ª•' },
    { text: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng s·∫£n ph·∫©m n√†y nh∆∞ th·∫ø n√†o?', category: 'H∆∞·ªõng d·∫´n' },
    { text: 'S·∫£n ph·∫©m n√†y c√≥ ch·ª©a ch·∫•t b·∫£o qu·∫£n c√≥ h·∫°i kh√¥ng?', category: 'An to√†n' },
    { text: 'Li·ªÅu l∆∞·ª£ng s·ª≠ d·ª•ng h√†ng ng√†y l√† bao nhi√™u?', category: 'H∆∞·ªõng d·∫´n' },
    { text: 'C√≥ th·ªÉ d√πng cho ph·ª• n·ªØ mang thai kh√¥ng?', category: 'S·ª©c kh·ªèe' },
    { text: 'Th√†nh ph·∫ßn t·ª± nhi√™n chi·∫øm bao nhi√™u ph·∫ßn trƒÉm?', category: 'Th√†nh ph·∫ßn' },
    { text: 'S·∫£n ph·∫©m n√†y c√≥ t∆∞∆°ng t√°c v·ªõi thu·ªëc kh√¥ng?', category: 'An to√†n' },
    { text: 'C√°ch b·∫£o qu·∫£n s·∫£n ph·∫©m nh∆∞ th·∫ø n√†o?', category: 'H∆∞·ªõng d·∫´n' }
  ];

  useEffect(() => {
    if (isRecording) {
      const pulse = () => {
        Animated.sequence([
          Animated.timing(recordingAnimation, {
            toValue: 1.3,
            duration: 600,
            useNativeDriver: true,
          }),
          Animated.timing(recordingAnimation, {
            toValue: 1,
            duration: 600,
            useNativeDriver: true,
          }),
        ]).start(() => {
          if (isRecording) pulse();
        });
      };
      pulse();
    } else {
      recordingAnimation.setValue(1);
    }
  }, [isRecording, recordingAnimation]);

  const getCurrentDateTime = () => {
    const now = new Date();
    return {
      fullDateTime: now.toLocaleString('vi-VN', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      timeOnly: now.toLocaleTimeString('vi-VN', {
        hour: '2-digit',
        minute: '2-digit'
      }),
      dateOnly: now.toLocaleDateString('vi-VN')
    };
  };

  const sendMessage = async (text) => {
  if (!text.trim()) return;

  const dateTime = getCurrentDateTime();

  // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o UI
  const userMessage = {
    id: Date.now(),
    type: "user",
    text,
    timestamp: dateTime.fullDateTime,
    date: dateTime.dateOnly,
  };
  setMessages((prev) => [...prev, userMessage]);
  setInputText("");
  setShowQuestions(false);
  setShowMenu(false);

  try {
    // G·ªçi API chatbot (server.js trong chatbot-demo)
    const res = await fetch("http://localhost:5000/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message: text }),
    });

    const data = await res.json();

    // Th√™m c√¢u tr·∫£ l·ªùi c·ªßa bot v√†o UI
    const botMessage = {
      id: Date.now() + 1,
      type: "bot",
      text: data.reply || "‚ö†Ô∏è Bot kh√¥ng tr·∫£ l·ªùi",
      timestamp: new Date().toLocaleString("vi-VN"),
      date: new Date().toLocaleDateString("vi-VN"),
    };
    setMessages((prev) => [...prev, botMessage]);
  } catch (err) {
    console.error("‚ùå L·ªói g·ªçi API chatbot:", err);
    setMessages((prev) => [
      ...prev,
      {
        id: Date.now() + 1,
        type: "bot",
        text: "‚ùå C√≥ l·ªói khi k·∫øt n·ªëi server chatbot.",
        timestamp: new Date().toLocaleString("vi-VN"),
        date: new Date().toLocaleDateString("vi-VN"),
      },
    ]);
  }
};

  const getBotResponse = (userText) => {
    const responses = [
      'D·ª±a tr√™n th√†nh ph·∫ßn b·∫°n cung c·∫•p, t√¥i th·∫•y s·∫£n ph·∫©m n√†y ch·ª©a m·ªôt s·ªë ch·∫•t c√≥ th·ªÉ g√¢y d·ªã ·ª©ng nh∆∞ gluten v√† lactose. B·∫°n c√≥ ti·ªÅn s·ª≠ d·ªã ·ª©ng v·ªõi nh·ªØng ch·∫•t n√†y kh√¥ng?',
      'S·∫£n ph·∫©m n√†y c√≥ ch·ª©a 15g ƒë∆∞·ªùng v√† c√°c ch·∫•t b·∫£o qu·∫£n E200, E211. T√¥i khuy√™n b·∫°n n√™n h·∫°n ch·∫ø s·ª≠ d·ª•ng n·∫øu ƒëang ki·ªÉm so√°t ƒë∆∞·ªùng huy·∫øt ho·∫∑c c√≥ ti·ªÅn s·ª≠ ti·ªÉu ƒë∆∞·ªùng.',
      'Th√†nh ph·∫ßn n√†y kh√° an to√†n cho tr·∫ª em tr√™n 3 tu·ªïi. Tuy nhi√™n, n√™n s·ª≠ d·ª•ng theo li·ªÅu l∆∞·ª£ng: 1-2 vi√™n/ng√†y cho tr·∫ª 3-6 tu·ªïi, 2-3 vi√™n/ng√†y cho tr·∫ª tr√™n 6 tu·ªïi.',
      'T√¥i ƒë√£ ph√¢n t√≠ch th√†nh ph·∫ßn v√† t√¨m th·∫•y m·ªôt s·ªë l·ª±a ch·ªçn t·ªët h∆°n cho s·ª©c kh·ªèe c·ªßa b·∫°n v·ªõi √≠t ƒë∆∞·ªùng v√† nhi·ªÅu vitamin t·ª± nhi√™n h∆°n. B·∫°n c√≥ mu·ªën xem g·ª£i √Ω kh√¥ng?',
      'S·∫£n ph·∫©m n√†y ch·ª©a 85% th√†nh ph·∫ßn t·ª± nhi√™n, kh√¥ng c√≥ ch·∫•t t·∫°o m√†u nh√¢n t·∫°o. T√°c d·ª•ng ph·ª• hi·∫øm g·∫∑p, c√≥ th·ªÉ g√¢y kh√≥ ti√™u nh·∫π ·ªü m·ªôt s·ªë ng∆∞·ªùi nh·∫°y c·∫£m.',
      'Li·ªÅu l∆∞·ª£ng khuy·∫øn ngh·ªã: Ng∆∞·ªùi l·ªõn 2-3 l·∫ßn/ng√†y, m·ªói l·∫ßn 1-2 vi√™n, u·ªëng sau b·ªØa ƒÉn 30 ph√∫t. Kh√¥ng n√™n v∆∞·ª£t qu√° 6 vi√™n/ng√†y.'
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const speakResponse = (text) => {
    setIsSpeaking(true);
    // Simulate text-to-speech duration
    setTimeout(() => {
      setIsSpeaking(false);
    }, Math.min(text.length * 50, 5000));
  };

  const handleVoicePress = () => {
    if (isRecording) {
      // Stop recording
      setIsRecording(false);
      Alert.alert('Ghi √¢m ho√†n t·∫•t', 'ƒêang x·ª≠ l√Ω gi·ªçng n√≥i c·ªßa b·∫°n...');
    } else {
      // Start recording
      setIsRecording(true);
      Alert.alert('B·∫Øt ƒë·∫ßu ghi √¢m', 'H√£y n√≥i c√¢u h·ªèi c·ªßa b·∫°n...');
      
      // Simulate voice recording for 3-5 seconds
      setTimeout(() => {
        setIsRecording(false);
        const voiceTexts = [
          'S·∫£n ph·∫©m n√†y c√≥ an to√†n cho tr·∫ª em kh√¥ng?',
          'Th√†nh ph·∫ßn n√†o c√≥ th·ªÉ g√¢y d·ªã ·ª©ng?',
          'C√≥ s·∫£n ph·∫©m t·ªët h∆°n kh√¥ng?',
          'Li·ªÅu l∆∞·ª£ng s·ª≠ d·ª•ng nh∆∞ th·∫ø n√†o?'
        ];
        const voiceText = voiceTexts[Math.floor(Math.random() * voiceTexts.length)];
        sendMessage(voiceText);
      }, Math.random() * 2000 + 2000);
    }
  };

  const handleQuestionPress = (question) => {
    sendMessage(question);
    setShowQuickQuestionsModal(false);
  };

  const handleHistoryPress = (historyItem) => {
    setShowHistoryModal(false);
    // Simulate loading chat history
    Alert.alert(
      'T·∫£i l·ªãch s·ª≠ chat',
      `ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán: "${historyItem.title}"\nNg√†y: ${historyItem.date}\nTin nh·∫Øn: ${historyItem.messages}`,
      [
        { text: 'H·ªßy', style: 'cancel' },
        { 
          text: 'T·∫£i', 
          onPress: () => {
            // Here you would load the actual chat history
            console.log('Loading chat history:', historyItem);
          }
        }
      ]
    );
  };

  const clearCurrentChat = () => {
    Alert.alert(
      'X√≥a cu·ªôc tr√≤ chuy·ªán',
      'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i?',
      [
        { text: 'H·ªßy', style: 'cancel' },
        {
          text: 'X√≥a',
          style: 'destructive',
          onPress: () => {
            setMessages([{
              id: Date.now(),
              type: 'bot',
              text: 'Xin ch√†o! T√¥i l√† HealthScan AI - tr·ª£ l√Ω s·ª©c kh·ªèe th√¥ng minh c·ªßa b·∫°n. H√£y ch·ª•p ·∫£nh th√†nh ph·∫ßn c·ªßa s·∫£n ph·∫©m ho·∫∑c ƒë·∫∑t c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe nh√©! üåø',
              timestamp: getCurrentDateTime().fullDateTime,
              date: getCurrentDateTime().dateOnly
            }]);
            setShowQuestions(true);
            setShowMenu(false);
          }
        }
      ]
    );
  };

  const renderHistoryItem = ({ item }) => (
    <TouchableOpacity
      style={styles.historyItem}
      onPress={() => handleHistoryPress(item)}
    >
      <View style={styles.historyItemContent}>
        <Text style={styles.historyItemTitle}>{item.title}</Text>
        <Text style={styles.historyItemMessage}>{item.lastMessage}</Text>
        <View style={styles.historyItemInfo}>
          <Text style={styles.historyItemTime}>{item.timestamp}</Text>
          <Text style={styles.historyItemCount}>{item.messages} tin nh·∫Øn</Text>
        </View>
      </View>
      <Ionicons name="chevron-forward" size={20} color="#ccc" />
    </TouchableOpacity>
  );

  const renderQuickQuestion = ({ item, index }) => (
    <TouchableOpacity
      style={styles.quickQuestionItem}
      onPress={() => handleQuestionPress(item.text)}
    >
      <View style={styles.quickQuestionHeader}>
        <Text style={styles.quickQuestionCategory}>{item.category}</Text>
      </View>
      <Text style={styles.quickQuestionText}>{item.text}</Text>
    </TouchableOpacity>
  );

  const renderMessage = (message) => {
    const isBot = message.type === 'bot';
    return (
      <View key={message.id} style={[
        styles.messageContainer,
        isBot ? styles.botMessageContainer : styles.userMessageContainer
      ]}>
        {isBot && (
          <View style={styles.botAvatarContainer}>
            <View style={styles.botAvatar}>
              <Text style={styles.botAvatarText}>ü§ñ</Text>
            </View>
            {isSpeaking && (
              <View style={styles.speakingIndicator}>
                <Text style={styles.speakingText}>üîä</Text>
              </View>
            )}
          </View>
        )}
        <View style={[
          styles.messageBubble,
          isBot ? styles.botMessage : styles.userMessage
        ]}>
          <Text style={[
            styles.messageText,
            isBot ? styles.botMessageText : styles.userMessageText
          ]}>
            {message.text}
          </Text>
          <Text style={[
            styles.messageTime,
            isBot ? styles.botMessageTime : styles.userMessageTime
          ]}>
            {message.timestamp}
          </Text>
        </View>
      </View>
    );
  };

  const renderSuggestedQuestion = (question, index) => (
    <TouchableOpacity
      key={index}
      style={styles.questionCard}
      onPress={() => handleQuestionPress(question.text)}
    >
      <View style={styles.questionHeader}>
        <Text style={styles.questionCategory}>{question.category}</Text>
      </View>
      <Text style={styles.questionText}>{question.text}</Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerTop}>
          <TouchableOpacity
            style={styles.menuButton}
            onPress={() => setShowMenu(!showMenu)}
          >
            <Ionicons name="add" size={24} color="#4CAF50" />
          </TouchableOpacity>
          <Text style={styles.headerDate}>
            {new Date().toLocaleDateString('vi-VN', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </Text>
          <Text style={styles.headerTime}>
            {new Date().toLocaleTimeString('vi-VN', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </Text>
        </View>
        
        {showMenu && (
          <View style={styles.dropdownMenu}>
            <TouchableOpacity
              style={styles.menuItem}
              onPress={() => {
                setShowHistoryModal(true);
                setShowMenu(false);
              }}
            >
              <Ionicons name="time" size={20} color="#666" />
              <Text style={styles.menuItemText}>L·ªãch s·ª≠ chat</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.menuItem}
              onPress={() => {
                setShowQuickQuestionsModal(true);
                setShowMenu(false);
              }}
            >
              <Ionicons name="help-circle" size={20} color="#666" />
              <Text style={styles.menuItemText}>C√¢u h·ªèi nhanh</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.menuItem}
              onPress={clearCurrentChat}
            >
              <Ionicons name="trash" size={20} color="#f44336" />
              <Text style={[styles.menuItemText, { color: '#f44336' }]}>X√≥a chat hi·ªán t·∫°i</Text>
            </TouchableOpacity>
          </View>
        )}

        <View style={styles.headerContent}>
          <View style={styles.headerLeft}>
            <View style={styles.headerIcon}>
              <Ionicons name="medical" size={24} color="#4CAF50" />
            </View>
            <View>
              <Text style={styles.headerTitle}>Ch√†o m·ª´ng ƒë·∫øn v·ªõi HealthScan</Text>
              <Text style={styles.headerSubtitle}>
                AI th√¥ng minh gi√∫p ph√¢n t√≠ch th√†nh ph·∫ßn s·∫£n ph·∫©m v√† t∆∞ v·∫•n s·ª©c kh·ªèe c√° nh√¢n h√≥a
              </Text>
              <View style={styles.headerTags}>
                <View style={styles.tag}>
                  <Ionicons name="analytics" size={12} color="#4CAF50" />
                  <Text style={styles.tagText}>AI Analysis</Text>
                </View>
                <View style={styles.tag}>
                  <Ionicons name="shield-checkmark" size={12} color="#4CAF50" />
                  <Text style={styles.tagText}>T∆∞ v·∫•n an to√†n</Text>
                </View>
              </View>
            </View>
          </View>
          <Image
            source={{ uri: 'https://via.placeholder.com/80x80/4CAF50/FFFFFF?text=ü•ó' }}
            style={styles.headerImage}
          />
        </View>
      </View>

      {/* Suggested Questions */}
      {showQuestions && (
        <View style={styles.questionsSection}>
          <View style={styles.questionsTitleContainer}>
            <Ionicons name="help-circle" size={20} color="#666" />
            <Text style={styles.questionsTitle}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</Text>
          </View>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            style={styles.questionsScroll}
          >
            {suggestedQuestions.map(renderSuggestedQuestion)}
          </ScrollView>
        </View>
      )}

      {/* Messages */}
      <ScrollView
        ref={scrollViewRef}
        style={styles.messagesContainer}
        showsVerticalScrollIndicator={false}
        onContentSizeChange={() => scrollViewRef.current?.scrollToEnd({ animated: true })}
      >
        {messages.map(renderMessage)}
      </ScrollView>

      {/* Footer Note */}
      <View style={styles.footer}>
        <Ionicons name="information-circle" size={16} color="#999" />
        <Text style={styles.footerText}>
          Nh·∫≠p v√†o c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m hi·ªÉu v·ªÅ HealthScan AI
        </Text>
      </View>

      {/* Input */}
      <View style={styles.inputContainer}>
        <View style={styles.inputWrapper}>
          <TextInput
            style={styles.textInput}
            placeholder="ƒê·∫∑t c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe ho·∫∑c s·∫£n ph·∫©m..."
            value={inputText}
            onChangeText={setInputText}
            multiline
            maxLength={500}
          />
          <TouchableOpacity
            style={[styles.voiceButton, isRecording && styles.voiceButtonRecording]}
            onPress={handleVoicePress}
          >
            <Animated.View
              style={[
                styles.voiceButtonInner,
                { transform: [{ scale: recordingAnimation }] }
              ]}
            >
              <Ionicons
                name={isRecording ? "stop" : "mic"}
                size={20}
                color={isRecording ? "#f44336" : "#666"}
              />
            </Animated.View>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.sendButton, inputText.trim() && styles.sendButtonActive]}
            onPress={() => sendMessage(inputText)}
          >
            <Ionicons
              name="send"
              size={20}
              color={inputText.trim() ? "#fff" : "#999"}
            />
          </TouchableOpacity>
        </View>
      </View>

      {/* History Modal */}
      <Modal
        visible={showHistoryModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowHistoryModal(false)}
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>L·ªãch s·ª≠ chat</Text>
            <TouchableOpacity
              onPress={() => setShowHistoryModal(false)}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color="#666" />
            </TouchableOpacity>
          </View>
          <FlatList
            data={chatHistory}
            renderItem={renderHistoryItem}
            keyExtractor={(item) => item.id.toString()}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={styles.historyList}
          />
        </SafeAreaView>
      </Modal>

      {/* Quick Questions Modal */}
      <Modal
        visible={showQuickQuestionsModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowQuickQuestionsModal(false)}
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>C√¢u h·ªèi nhanh</Text>
            <TouchableOpacity
              onPress={() => setShowQuickQuestionsModal(false)}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color="#666" />
            </TouchableOpacity>
          </View>
          <FlatList
            data={quickQuestions}
            renderItem={renderQuickQuestion}
            keyExtractor={(item, index) => index.toString()}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={styles.quickQuestionsList}
            numColumns={1}
          />
        </SafeAreaView>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    backgroundColor: '#e8f5e8',
    padding: 16,
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  menuButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  headerDate: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
    flex: 1,
    marginLeft: 12,
  },
  headerTime: {
    fontSize: 16,
    color: '#2e7d32',
    fontWeight: 'bold',
  },
  dropdownMenu: {
    position: 'absolute',
    top: 60,
    left: 16,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.15,
    shadowRadius: 8,
    elevation: 8,
    zIndex: 1000,
    minWidth: 200,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    gap: 12,
  },
  menuItemText: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  headerLeft: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  headerIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2e7d32',
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    marginBottom: 8,
  },
  headerTags: {
    flexDirection: 'row',
    gap: 8,
  },
  tag: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    gap: 4,
  },
  tagText: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '500',
  },
  headerImage: {
    width: 80,
    height: 80,
    borderRadius: 12,
    marginLeft: 16,
  },
  questionsSection: {
    backgroundColor: '#fff',
    marginTop: 8,
    paddingVertical: 16,
  },
  questionsTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    marginBottom: 12,
    gap: 8,
  },
  questionsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  questionsScroll: {
    paddingLeft: 16,
  },
  questionCard: {
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    padding: 12,
    marginRight: 12,
    width: 200,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  questionHeader: {
    marginBottom: 8,
  },
  questionCategory: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '600',
    textTransform: 'uppercase',
  },
  questionText: {
    fontSize: 14,
    color: '#333',
    lineHeight: 20,
  },
  messagesContainer: {
    flex: 1,
    paddingHorizontal: 16,
    paddingTop: 16,
  },
  messageContainer: {
    flexDirection: 'row',
    marginBottom: 16,
    alignItems: 'flex-end',
  },
  botMessageContainer: {
    justifyContent: 'flex-start',
  },
  userMessageContainer: {
    justifyContent: 'flex-end',
  },
  botAvatarContainer: {
    alignItems: 'center',
    marginRight: 8,
  },
  botAvatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
  },
  botAvatarText: {
    fontSize: 16,
  },
  speakingIndicator: {
    marginTop: 4,
  },
  speakingText: {
    fontSize: 12,
  },
  messageBubble: {
    maxWidth: '80%',
    borderRadius: 18,
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  botMessage: {
    backgroundColor: '#fff',
    borderBottomLeftRadius: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  userMessage: {
    backgroundColor: '#4CAF50',
    borderBottomRightRadius: 4,
    alignSelf: 'flex-end',
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
    marginBottom: 4,
  },
  botMessageText: {
    color: '#333',
  },
  userMessageText: {
    color: '#fff',
  },
  messageTime: {
    fontSize: 11,
    opacity: 0.7,
  },
  botMessageTime: {
    color: '#666',
  },
  userMessageTime: {
    color: '#fff',
  },
  footer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    gap: 6,
  },
  footerText: {
    fontSize: 12,
    color: '#999',
    textAlign: 'center',
  },
  inputContainer: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderTopWidth: 1,
    borderTopColor: '#e9ecef',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    backgroundColor: '#f8f9fa',
    borderRadius: 24,
    paddingHorizontal: 16,
    paddingVertical: 8,
    gap: 8,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    maxHeight: 100,
    paddingVertical: 8,
  },
  voiceButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  voiceButtonRecording: {
    backgroundColor: '#ffebee',
    shadowColor: '#f44336',
  },
  voiceButtonInner: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 20,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#e9ecef',
  },
  sendButtonActive: {
    backgroundColor: '#4CAF50',
    shadowColor: '#4CAF50',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 4,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  historyList: {
    paddingVertical: 16,
  },
  historyItem: {
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginBottom: 12,
    padding: 16,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  historyItemContent: {
    flex: 1,
  },
  historyItemTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  historyItemMessage: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  historyItemInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  historyItemTime: {
    fontSize: 12,
    color: '#999',
  },
  historyItemCount: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '500',
  },
  quickQuestionsList: {
    paddingVertical: 16,
    paddingHorizontal: 16,
  },
  quickQuestionItem: {
    backgroundColor: '#fff',
    marginBottom: 12,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    borderLeftWidth: 4,
    borderLeftColor: '#4CAF50',
  },
  quickQuestionHeader: {
    marginBottom: 8,
  },
  quickQuestionCategory: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '600',
    textTransform: 'uppercase',
    backgroundColor: '#e8f5e8',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    alignSelf: 'flex-start',
  },
  quickQuestionText: {
    fontSize: 16,
    color: '#333',
    lineHeight: 22,
    fontWeight: '500',
  },
});

export default HealthScanChatbot;